#include "shell.h"

/**
 * _env - prints environment variables
 * @data: data structure (_environ)
 * Return: no return
 */
int  _env(shell_d *data)
{
	int i, j;

	for (i = 0; data->_environ[i]; i++)
	{
		for (j = 0; data->_environ[i][j]; j++)
			;
		write(1, data->_environ[i], j);
		write(1, "\n", 1);
	}
	data->status = 0;
	return (1);
}

/**
 * _setenv - update or add environment variable
 * @data: data structure (name and val)
 * Return : 1 if success
 */
int _setenv(shell_d *data)
{
	if (!data->args[1] || !data->args[2])
	{
		handle_error(data, -1);
		return (1);
	}
	env_set(data->args[1], data->args[2], data);
	return (1);
}

/**
 * env_set - a function that set env variable
 * @name: env variable's name
 * @val: value of env var
 * @data: data structure (provide _environ)
 * Return: nothing
 */
void env_set(char *name, char *val, shell_d *data)
{
	char *env_var, *env_name;
	int i;

	for (i = 0; data->_environ[i]; i++)
	{
		env_var = _strdup(data->_environ[i]);
		env_name = _strtok(env_var, "=");
		if (_strcmp(env_name, name) == 0)
		{
			free(data->_environ[i]);
			data->_environ[i] = infocpy(env_name, val);
			free(env_var);
			return;
		}
		free(env_var);
	}
	data->_environ = _reallocdp(data->_environ, i,sizeof(char) * (i + 2));
	data->_environ[i] = infocpy(name, val);
	i++;
	data->_environ[i] = NULL;
}

/**
 * infocpy - used to copy info needed.
 * @name: name of env var
 * @val: value of env var
 * Return: new env
 */
char *infocpy(char *name, char *val)
{
	char *env;
	int len;

	len = _strlen(name) + _strlen(val);
	env = malloc(sizeof(char) * (len + 2));
	if (env == NULL)
		return (NULL);
	_strcpy(env, name);
	_strcat(env, "=");
	_strcat(env, val);
	_strcat(env, '\0');

	return (env);
}

